# Generated by Django 2.0 on 2018-06-06 09:26

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owners', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), db_index=True, default=[], help_text='object keys for objects that are allowed to act on this process', size=None)),
                ('object_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), db_index=True, default=[], size=None)),
                ('payload', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('created_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified_date', models.DateTimeField(auto_now=True, db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProcessDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), db_index=True, default=[], size=None)),
                ('version', models.CharField(db_index=True, max_length=10)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField()),
                ('docs', models.TextField(blank=True, null=True)),
                ('example_payload', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('example_response', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('is_live', models.BooleanField(default=False, help_text='Whether or not this process is publically available')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessTasks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('runner', models.CharField(choices=[('api.tasks.http_task_runner', 'Trigger a task over HTTP'), ('api.tasks.local_task_runner', 'Call a locally available task')], max_length=10)),
                ('run_immediately', models.BooleanField(default=True, help_text='Will run this task immediately and include the result in the response to the upstream process')),
                ('is_async', models.BooleanField(default=False, help_text='Run this task in the background (Response is not returned in realtime)')),
                ('payload_template', django.contrib.postgres.fields.jsonb.JSONField(default={}, help_text='A jinja/django template which will be parsed with the context from the parent process to create the payload for the task to be run')),
                ('schedule_offset_from_now', models.PositiveIntegerField(db_index=True, default=0, help_text='Offset in seconds from now')),
                ('schedule_offset_from_field', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), db_index=True, default=[], help_text='A tuple in the format: ["payload.object.date_created", "60"]', size=None)),
                ('process_definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ProcessDefinition')),
            ],
        ),
        migrations.CreateModel(
            name='RegisteredTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.TextField(blank=True, help_text='This is downstream service to call', null=True)),
                ('name', models.TextField(blank=True, help_text='This is the formal name of the test that will be called', null=True)),
                ('friendly_name', models.TextField(blank=True, null=True)),
                ('registered_runners', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), db_index=True, default=[], help_text='A list of the runners available for this task', size=None)),
                ('production_status', models.CharField(choices=[('alpha', 'alpha'), ('beta', 'beta'), ('stable', 'stable')], default='alpha', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('response_code', models.CharField(default='0', max_length=10)),
                ('is_success_response', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(help_text='This is downstream service to call', max_length=100)),
                ('method_name', models.CharField(help_text='This is the formal name of the test that will be called', max_length=100)),
                ('friendly_name', models.CharField(blank=True, max_length=100, null=True)),
                ('payload', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('runner', models.CharField(choices=[('api.tasks.http_task_runner', 'Trigger a task over HTTP'), ('api.tasks.local_task_runner', 'Call a locally available task')], max_length=10)),
                ('status', models.CharField(choices=[('N', 'New'), ('IP', 'In Progress'), ('C', 'Complete'), ('F', 'Failed'), ('X', 'Cancelled')], default='N', max_length=10)),
                ('run_immediately', models.BooleanField(default=True, help_text='Will run this task immediately and include the result in the response to the upstream process')),
                ('scheduled_datetime', models.DateTimeField(db_index=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified_date', models.DateTimeField(auto_now=True, db_index=True)),
                ('definition', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.RegisteredTask')),
                ('process', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Process')),
            ],
        ),
        migrations.AddField(
            model_name='result',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Task'),
        ),
        migrations.AddField(
            model_name='processtasks',
            name='registered_task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.RegisteredTask'),
        ),
        migrations.AddField(
            model_name='processdefinition',
            name='tasks',
            field=models.ManyToManyField(through='api.ProcessTasks', to='api.RegisteredTask'),
        ),
        migrations.AddField(
            model_name='process',
            name='definition',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.ProcessDefinition'),
        ),
    ]
